create database twitter;
use twitter;

CREATE TABLE USER (
    user_id VARCHAR(30) UNIQUE,
    pwd VARCHAR(30),
    phone_num VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    user_name VARCHAR(30),
    intro TEXT,
    image_url VARCHAR(255)
);

CREATE TABLE POSTS (
    post_id INT PRIMARY KEY AUTO_INCREMENT,
    message VARCHAR(255),
    writer_id VARCHAR(30) UNIQUE,
    num_of_likes INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    photo_url VARCHAR(255),
    FOREIGN KEY (writer_id) REFERENCES USER(user_id) ON DELETE CASCADE
);

CREATE TABLE COMMENT (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    message VARCHAR(255),
    user_id VARCHAR(30) UNIQUE,
    post_id INT,
    num_of_likes INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    photo_url VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES POSTS(post_id) ON DELETE CASCADE
);

CREATE TABLE CHILD_COMMENT (
    cmt_id INT PRIMARY KEY AUTO_INCREMENT,
    message VARCHAR(255),
    user_id VARCHAR(30) UNIQUE,
    parent_cmt_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    photo_url VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_cmt_id) REFERENCES COMMENT(comment_id) ON DELETE CASCADE
);

CREATE TABLE COMMENT_LIKE (
    l_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(30) UNIQUE,
    cmt_id INT,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (cmt_id) REFERENCES COMMENT(comment_id) ON DELETE CASCADE
);

CREATE TABLE POST_LIKE (
    l_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(30) UNIQUE,
    post_id INT,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES POSTS(post_id) ON DELETE CASCADE
);

CREATE TABLE FOLLOWER (
    f_id INT PRIMARY KEY AUTO_INCREMENT,
    follower_id VARCHAR(30) UNIQUE,
    user_id VARCHAR(30) UNIQUE,
    FOREIGN KEY (follower_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE
);

CREATE TABLE FOLLOWING (
    f_id INT PRIMARY KEY AUTO_INCREMENT,
    following_id VARCHAR(30) UNIQUE,
    user_id VARCHAR(30) UNIQUE,
    FOREIGN KEY (following_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE
);

CREATE TABLE QUOTE (
    quote_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(30) UNIQUE,
    post_id INT,
    message VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES POSTS(post_id) ON DELETE CASCADE
);

CREATE TABLE BOOKMARK (
    bmark_id INT PRIMARY KEY AUTO_INCREMENT,
    post_id INT,
    user_id VARCHAR(30) UNIQUE,
    FOREIGN KEY (post_id) REFERENCES POSTS(post_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE
);

CREATE TABLE DM (
    dm_id INT PRIMARY KEY AUTO_INCREMENT,
    sender_id VARCHAR(30) UNIQUE,
    receiver_id VARCHAR(30) UNIQUE,
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES USER(user_id),
    FOREIGN KEY (receiver_id) REFERENCES USER(user_id)
);

CREATE TABLE RETWEET (
    ret_id INT PRIMARY KEY AUTO_INCREMENT,
    post_id INT,
    user_id VARCHAR(30) UNIQUE,
    FOREIGN KEY (post_id) REFERENCES POSTS(post_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES USER(user_id) ON DELETE CASCADE
);